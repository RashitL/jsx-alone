{"src/util/toPack/jsx-alone-core.d.ts":{"isBinary":false,"fileName":"src/util/toPack/jsx-alone-core.d.ts","content":"/** Declaration file generated by dts-gen */\r\n\r\nexport class AbstractElementLike {\r\n  constructor(tag: any);\r\n  appendChild(c: any): void;\r\n  replaceChild(i: any, c: any): void;\r\n  setAttribute(name: any, value: any): void;\r\n}\r\nexport class ElementClass {\r\n  constructor(_props: any);\r\n  asJSXElement(): any;\r\n}\r\nexport class JsonImplElementLikeImpl {\r\n  constructor(...args: any[]);\r\n  dangerouslySetInnerHTML(s: any): void;\r\n  render(config: any): any;\r\n}\r\nexport class JsonImplTextNodeLikeImpl {\r\n  constructor(...args: any[]);\r\n  render(config: any): any;\r\n}\r\nexport const AbstractJSXAlone: any;\r\nexport function AbstractElementClass(...args: any[]): any;\r\nexport function AbstractTextNodeLike(content: any): void;\r\nexport function If(props: any): any;\r\nexport function Js(props: any): any;\r\nexport function JsonImplElementClass(...args: any[]): any;\r\nexport function JsonImplOutputElAsHtml(node: any, indentLevel: any): any;\r\nexport function Style(props: any): any;\r\nexport function Styles(styles: any): any;\r\nexport function array(n: any, sample: any): any;\r\nexport function checkThrow(r: any, msg: any): any;\r\nexport function createCreateElement(config: any, ...args: any[]): any;\r\nexport function debug(err: any): void;\r\nexport function getGlobal(): any;\r\nexport function getPosition(string: any, subString: any, index: any): any;\r\nexport function indent(i: any, tabSize: any): any;\r\nexport function installJSXAloneAsGlobal(i: any): void;\r\nexport function isElementClass(c: any): any;\r\nexport function isElementClassConstructor(c: any): any;\r\nexport function isElementConstructor(c: any): any;\r\nexport function isElementLike(n: any): any;\r\nexport function isJsonImplOutputEl(a: any): any;\r\nexport function isJsonImplOutputText(a: any): any;\r\nexport function isNode(n: any): any;\r\nexport function isTextNodeLike(n: any): any;\r\nexport function objectMap(o: any, f: any): any;\r\nexport function printMs(ms: any, config: any): any;\r\nexport function printStyleHtmlAttribute(value: any): any;\r\nexport function randomIntBetween(a: any, b: any): any;\r\nexport function randomItem(array: any): any;\r\nexport function removeWhites(s: any, replaceWith: any): any;\r\nexport function repeat(n: any, s: any): any;\r\nexport function unique(prefix: any): any;\r\nexport function updateElement(element: any, textNodeImpl: any, tag: any, attrs: any, children: any, create: any): void;\r\nexport namespace AbstractElementClass {\r\n  namespace prototype {\r\n    const props: any;\r\n    function asJSXElement(): any;\r\n    namespace asJSXElement {\r\n      const prototype: {\r\n      };\r\n    }\r\n  }\r\n}\r\nexport namespace AbstractElementLike {\r\n  //@ts-ignore\r\n  namespace prototype {\r\n    function appendChild(c: any): void;\r\n    function replaceChild(i: any, c: any): void;\r\n    function setAttribute(name: any, value: any): void;\r\n    namespace appendChild {\r\n      const prototype: {\r\n      };\r\n    }\r\n    namespace replaceChild {\r\n      const prototype: {\r\n      };\r\n    }\r\n    namespace setAttribute {\r\n      const prototype: {\r\n      };\r\n    }\r\n  }\r\n}\r\nexport namespace AbstractTextNodeLike {\r\n  const prototype: {}\r\n}\r\nexport namespace ElementClass {\r\n  //@ts-ignore\r\n\r\n  namespace prototype {\r\n    const props: any;\r\n    function asJSXElement(): any;\r\n    namespace asJSXElement {\r\n      const prototype: {\r\n      };\r\n    }\r\n  }\r\n}\r\nexport namespace If {\r\n  const prototype: {}\r\n}\r\nexport namespace JSXAloneJsonImpl {\r\n  function createElement(tag: any, attrs: any, ...args: any[]): any;\r\n  function render(el: any, config: any): any;\r\n  function updateElement(element: any, tag: any, attrs: any, children: any, create: any): any;\r\n  namespace createElement {\r\n    const prototype: {\r\n    };\r\n  }\r\n  namespace render {\r\n    const prototype: {\r\n    };\r\n  }\r\n  namespace updateElement {\r\n    const prototype: {\r\n    };\r\n  }\r\n}\r\nexport namespace Js {\r\n  const prototype: {}\r\n}\r\nexport namespace JsonImplElementClass {\r\n  namespace prototype {\r\n    const props: any;\r\n    function asJSXElement(): any;\r\n    namespace asJSXElement {\r\n      const prototype: {\r\n      };\r\n    }\r\n  }\r\n}\r\nexport namespace JsonImplElementLikeImpl {\r\n  //@ts-ignore\r\n  namespace prototype {\r\n    function appendChild(c: any): void;\r\n    function dangerouslySetInnerHTML(s: any): void;\r\n    function render(config: any): any;\r\n    function replaceChild(i: any, c: any): void;\r\n    function setAttribute(name: any, value: any): void;\r\n    namespace appendChild {\r\n      const prototype: {\r\n      };\r\n    }\r\n    namespace dangerouslySetInnerHTML {\r\n      const prototype: {\r\n      };\r\n    }\r\n    namespace render {\r\n      const prototype: {\r\n      };\r\n    }\r\n    namespace replaceChild {\r\n      const prototype: {\r\n      };\r\n    }\r\n    namespace setAttribute {\r\n      const prototype: {\r\n      };\r\n    }\r\n  }\r\n}\r\nexport namespace JsonImplOutputElAsHtml {\r\n  const prototype: {}\r\n}\r\nexport namespace JsonImplTextNodeLikeImpl {\r\n  //@ts-ignore\r\n  namespace prototype {\r\n    function render(config: any): any;\r\n    namespace render {\r\n      const prototype: {\r\n      };\r\n    }\r\n  }\r\n}\r\nexport namespace Style {\r\n  const prototype: {}\r\n}\r\nexport namespace Styles {\r\n  const prototype: {}\r\n}\r\nexport namespace array {\r\n  const prototype: {}\r\n}\r\nexport namespace checkThrow {\r\n  const prototype: {}\r\n}\r\nexport namespace createCreateElement {\r\n  const prototype: {}\r\n}\r\nexport namespace debug {\r\n  const prototype: {}\r\n}\r\nexport namespace getGlobal {\r\n  const prototype: {}\r\n}\r\nexport namespace getPosition {\r\n  const prototype: {}\r\n}\r\nexport namespace indent {\r\n  const prototype: {}\r\n}\r\nexport namespace installJSXAloneAsGlobal {\r\n  const prototype: {}\r\n}\r\nexport namespace isElementClass {\r\n  const prototype: {}\r\n}\r\nexport namespace isElementClassConstructor {\r\n  const prototype: {}\r\n}\r\nexport namespace isElementConstructor {\r\n  const prototype: {}\r\n}\r\nexport namespace isElementLike {\r\n  const prototype: {}\r\n}\r\nexport namespace isJsonImplOutputEl {\r\n  const prototype: {}\r\n}\r\nexport namespace isJsonImplOutputText {\r\n  const prototype: {}\r\n}\r\nexport namespace isNode {\r\n  const prototype: {}\r\n}\r\nexport namespace isTextNodeLike {\r\n  const prototype: {}\r\n}\r\nexport namespace objectMap {\r\n  const prototype: {}\r\n}\r\nexport namespace printMs {\r\n  const prototype: {}\r\n}\r\nexport namespace printStyleHtmlAttribute {\r\n  const prototype: {}\r\n}\r\nexport namespace randomIntBetween {\r\n  const prototype: {}\r\n}\r\nexport namespace randomItem {\r\n  const prototype: {}\r\n}\r\nexport namespace removeWhites {\r\n  const prototype: {}\r\n}\r\nexport namespace repeat {\r\n  const prototype: {}\r\n}\r\nexport namespace unique {\r\n  const prototype: {}\r\n}\r\nexport namespace updateElement {\r\n  const prototype: {}\r\n}\r\n"}}