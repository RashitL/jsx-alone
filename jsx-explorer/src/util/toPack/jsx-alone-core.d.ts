/** Declaration file generated by dts-gen */

export class AbstractElementLike {
  constructor(tag: any);
  appendChild(c: any): void;
  replaceChild(i: any, c: any): void;
  setAttribute(name: any, value: any): void;
}
export class ElementClass {
  constructor(_props: any);
  asJSXElement(): any;
}
export class JsonImplElementLikeImpl {
  constructor(...args: any[]);
  dangerouslySetInnerHTML(s: any): void;
  render(config: any): any;
}
export class JsonImplTextNodeLikeImpl {
  constructor(...args: any[]);
  render(config: any): any;
}
export const AbstractJSXAlone: any;
export function AbstractElementClass(...args: any[]): any;
export function AbstractTextNodeLike(content: any): void;
export function If(props: any): any;
export function Js(props: any): any;
export function JsonImplElementClass(...args: any[]): any;
export function JsonImplOutputElAsHtml(node: any, indentLevel: any): any;
export function Style(props: any): any;
export function Styles(styles: any): any;
export function array(n: any, sample: any): any;
export function checkThrow(r: any, msg: any): any;
export function createCreateElement(config: any, ...args: any[]): any;
export function debug(err: any): void;
export function getGlobal(): any;
export function getPosition(string: any, subString: any, index: any): any;
export function indent(i: any, tabSize: any): any;
export function installJSXAloneAsGlobal(i: any): void;
export function isElementClass(c: any): any;
export function isElementClassConstructor(c: any): any;
export function isElementConstructor(c: any): any;
export function isElementLike(n: any): any;
export function isJsonImplOutputEl(a: any): any;
export function isJsonImplOutputText(a: any): any;
export function isNode(n: any): any;
export function isTextNodeLike(n: any): any;
export function objectMap(o: any, f: any): any;
export function printMs(ms: any, config: any): any;
export function printStyleHtmlAttribute(value: any): any;
export function randomIntBetween(a: any, b: any): any;
export function randomItem(array: any): any;
export function removeWhites(s: any, replaceWith: any): any;
export function repeat(n: any, s: any): any;
export function unique(prefix: any): any;
export function updateElement(element: any, textNodeImpl: any, tag: any, attrs: any, children: any, create: any): void;
export namespace AbstractElementClass {
  namespace prototype {
    const props: any;
    function asJSXElement(): any;
    namespace asJSXElement {
      const prototype: {
      };
    }
  }
}
export namespace AbstractElementLike {
  //@ts-ignore
  namespace prototype {
    function appendChild(c: any): void;
    function replaceChild(i: any, c: any): void;
    function setAttribute(name: any, value: any): void;
    namespace appendChild {
      const prototype: {
      };
    }
    namespace replaceChild {
      const prototype: {
      };
    }
    namespace setAttribute {
      const prototype: {
      };
    }
  }
}
export namespace AbstractTextNodeLike {
  const prototype: {}
}
export namespace ElementClass {
  //@ts-ignore

  namespace prototype {
    const props: any;
    function asJSXElement(): any;
    namespace asJSXElement {
      const prototype: {
      };
    }
  }
}
export namespace If {
  const prototype: {}
}
export namespace JSXAloneJsonImpl {
  function createElement(tag: any, attrs: any, ...args: any[]): any;
  function render(el: any, config: any): any;
  function updateElement(element: any, tag: any, attrs: any, children: any, create: any): any;
  namespace createElement {
    const prototype: {
    };
  }
  namespace render {
    const prototype: {
    };
  }
  namespace updateElement {
    const prototype: {
    };
  }
}
export namespace Js {
  const prototype: {}
}
export namespace JsonImplElementClass {
  namespace prototype {
    const props: any;
    function asJSXElement(): any;
    namespace asJSXElement {
      const prototype: {
      };
    }
  }
}
export namespace JsonImplElementLikeImpl {
  //@ts-ignore
  namespace prototype {
    function appendChild(c: any): void;
    function dangerouslySetInnerHTML(s: any): void;
    function render(config: any): any;
    function replaceChild(i: any, c: any): void;
    function setAttribute(name: any, value: any): void;
    namespace appendChild {
      const prototype: {
      };
    }
    namespace dangerouslySetInnerHTML {
      const prototype: {
      };
    }
    namespace render {
      const prototype: {
      };
    }
    namespace replaceChild {
      const prototype: {
      };
    }
    namespace setAttribute {
      const prototype: {
      };
    }
  }
}
export namespace JsonImplOutputElAsHtml {
  const prototype: {}
}
export namespace JsonImplTextNodeLikeImpl {
  //@ts-ignore
  namespace prototype {
    function render(config: any): any;
    namespace render {
      const prototype: {
      };
    }
  }
}
export namespace Style {
  const prototype: {}
}
export namespace Styles {
  const prototype: {}
}
export namespace array {
  const prototype: {}
}
export namespace checkThrow {
  const prototype: {}
}
export namespace createCreateElement {
  const prototype: {}
}
export namespace debug {
  const prototype: {}
}
export namespace getGlobal {
  const prototype: {}
}
export namespace getPosition {
  const prototype: {}
}
export namespace indent {
  const prototype: {}
}
export namespace installJSXAloneAsGlobal {
  const prototype: {}
}
export namespace isElementClass {
  const prototype: {}
}
export namespace isElementClassConstructor {
  const prototype: {}
}
export namespace isElementConstructor {
  const prototype: {}
}
export namespace isElementLike {
  const prototype: {}
}
export namespace isJsonImplOutputEl {
  const prototype: {}
}
export namespace isJsonImplOutputText {
  const prototype: {}
}
export namespace isNode {
  const prototype: {}
}
export namespace isTextNodeLike {
  const prototype: {}
}
export namespace objectMap {
  const prototype: {}
}
export namespace printMs {
  const prototype: {}
}
export namespace printStyleHtmlAttribute {
  const prototype: {}
}
export namespace randomIntBetween {
  const prototype: {}
}
export namespace randomItem {
  const prototype: {}
}
export namespace removeWhites {
  const prototype: {}
}
export namespace repeat {
  const prototype: {}
}
export namespace unique {
  const prototype: {}
}
export namespace updateElement {
  const prototype: {}
}
