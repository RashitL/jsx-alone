{"version":3,"sources":["../../src/elementImpl.ts","../../src/elementClass.ts","../../src/createElement.ts","../../src/misc.tsx","../../src/util.ts","../../src/index.ts","../../src/Refs.tsx","main.tsx"],"names":[],"mappings":"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","file":"main.8933c76f.map","sourceRoot":"../../../jsx-alone-dom-sample-project/src/simple","sourcesContent":["import { JSXAloneComponent, NodeLike, ElementLike, TextNodeLike, RenderConfig } from '.'\r\nimport { ElementClassProps, ElementClass } from './elementClass';\r\nimport { ComponentClass, FunctionComponent } from './declarations/domElementDeclarations';\r\n\r\nexport function isElementClassConstructor(c: any): c is {new(props: ElementClassProps<any>): ElementClass} {\r\n  return c.prototype && c.prototype.render\r\n}\r\n\r\nexport function isNode<T>(n: any): n is NodeLike<T> {\r\n  return isTextNodeLike(n) || isElementLike(n)\r\n}\r\n\r\nexport function isElementLike<T>(n: any): n is ElementLike<T> {\r\n  return n && n.setAttribute\r\n}\r\n\r\nexport function isTextNodeLike<T>(n: any): n is TextNodeLike<T> {\r\n  return n && n.content && !isElementLike(n)\r\n}\r\n\r\nexport abstract class AbstractTextNodeLike<T> implements TextNodeLike<T> {\r\n  constructor(public content: string) {}\r\n  abstract render(config?: RenderConfig<T>): T\r\n}\r\n\r\nexport abstract class AbstractElementLike<T> implements ElementLike<T> {\r\n  // type: string | ComponentClass<P> | FunctionComponent<P>;\r\n  // props: P;\r\n  // key: Key | null;\r\n  attrs: {\r\n    [name: string]: any\r\n  }\r\n  children: NodeLike<T>[]\r\n  parentElement?: ElementLike<T>\r\n  \r\n  constructor(public tag: string) {\r\n    this.attrs = {}\r\n    this.children = []\r\n  }\r\n\r\n  abstract render(config?: RenderConfig<T>): T\r\n\r\n  setAttribute(name: string, value: string): void {\r\n    this.attrs[name] = value\r\n  }\r\n\r\n  appendChild(c: NodeLike<T>): void {\r\n    this.children.push(c)\r\n    if (isElementLike<T>(c)) {\r\n      c.parentElement = this\r\n    }\r\n  }\r\n  \r\n  abstract dangerouslySetInnerHTML(s: string): void\r\n  \r\n}\r\n","import { NodeLike, ElementLike } from './types';\r\nimport { isElementLike } from './elementImpl';\r\nimport { ReactNode } from './declarations/domElementDeclarations';\r\n\r\nexport type ElementClassProps<P> = ( Readonly<{ children?: ReactNode}>&Readonly<P> )\r\n\r\nexport interface IElementClass<P={}> {\r\n  props: ElementClassProps<P>\r\n  render(): JSX.Element\r\n}\r\n\r\n/**\r\n * A Class able to render() JSX. Similar to React.Component but only supporting properties, without state, context, ref, did/will methods, etc.\r\n */\r\nexport abstract class ElementClass<  P={}> implements IElementClass<P> {\r\n\r\n  constructor(public readonly props: ElementClassProps<P>) {\r\n  }\r\n\r\n  abstract render(): JSX.Element\r\n\r\n  // protected childrenAsArray(): NodeLike<P>[] {\r\n  //   return (Array.isArray(this.props.children) ? this.props.children : [this.props.children]) as NodeLike<P>[];\r\n  // }\r\n\r\n  // protected childrenElementsAsArray(): ElementLike<P>[] {\r\n  //   return this.childrenAsArray().filter(c => isElementLike<P>(c)) as ElementLike<P>[]\r\n  // }\r\n\r\n  // protected firstChildElement(): ElementLike<P> | undefined {\r\n  //   return this.childrenAsArray().find(e => true) as ElementLike<P> | undefined\r\n  // }\r\n}\r\nexport abstract class AbstractElementClass<P={}> extends ElementClass< P>{}\r\n","import { ElementClass } from './elementClass';\nimport { isElementClassConstructor, isNode } from './elementImpl';\nimport { CreateCreateElementConfig, ElementLike, JSXAlone, JSXAloneAttrs, JSXAloneTag } from './types';\n\nconst throwOnUnrecognized = false\n\nexport function debug(err: string) {\n  if (throwOnUnrecognized) {\n    throw err\n  } else {\n    console.error(err)\n  }\n}\n\nexport function createCreateElement<T, R extends ElementLike<T>=ElementLike<T>>(config: CreateCreateElementConfig<T, R>) {\n  // console.log(config);\n  \n  const { impl, textNodeImpl, onElementReady, onElementCreated: onElementCreate } = config\n\n  const createElement: CreateElementFunction<T, R> = function (tag, attrs = {}, ...children: any[]) {\n    attrs = attrs || {}\n    let element: R\n    let elementClassInstance: ElementClass | undefined\n    const tagIsString = typeof tag === 'string'\n    if (tagIsString) {\n      element = new impl(tag as string)\n    }\n    else if (isElementClassConstructor(tag)) {\n      elementClassInstance = new tag({ ...attrs, children: children }) \n      element = elementClassInstance.render() as any as R\n      // attrs = attrs.ref ? {ref: attrs.ref} : {}\n    }\n    else {\n      element = (tag as any)({ ...attrs, children: children })\n      // attrs={}\n    }\n    if (onElementCreate) {\n      onElementCreate({ elementLike: element, elementClassInstance, attrs })\n    }\n    attrs = tagIsString ? attrs : {}//(isClassElementClass(tag)&&!attrs.ref) ?{ref: attrs.ref}: attrs \n\n    Object.keys(attrs).forEach(name => {\n      const value = attrs[name]\n      const type = typeof value\n      if (type === 'string' || type === 'number') {\n        element.setAttribute(name, value)\n      }\n      else if (type === 'function') {\n        element.setAttribute(name, value)\n      }\n      else if (value === false) {\n        // do nothing\n      }\n      else if (value === true) {\n        element.setAttribute(name, name)\n      }\n      else if (name === 'dangerouslySetInnerHTML' && value) {\n        element.dangerouslySetInnerHTML(value.__html)\n      }\n      else {\n        element.setAttribute(name, value)\n      }\n    })\n\n\n    if (tagIsString) {\n      // don't render children for function or classes since they are responsible of render their own children\n      children\n        .filter(c => c)\n        .forEach(child => {\n          if (isNode<T>(child)) {\n            element.appendChild(child)\n          } else if (Array.isArray(child)) {\n            child.forEach(c => {\n              if (isNode<T>(c)) {\n                element.appendChild(c)\n              }\n              else {\n                element.appendChild(new textNodeImpl(c))\n              }\n            })\n          } else {\n            element.appendChild(new textNodeImpl(child))\n          }\n        })\n    }\n    if (onElementReady) {\n      onElementReady({ elementLike: element })\n    }\n    return element\n  }\n  return createElement\n}\n\nexport const AbstractJSXAlone: JSXAlone<any> = null as any\n\nexport type CreateElementFunction<T, R=ElementLike<T>> = (\n  tag: JSXAloneTag,\n  attrs?: JSXAloneAttrs<string> | undefined,\n  ...children: any[]\n) => R\n","// import { AbstractJSXAlone as  } from './createElement';\nimport { ReactNode, AbstractJSXAlone as JSXAlone } from '.';\n\n\nexport type Children = ReactNode\n\n// export type Props = { children: Children }\n\n// TODO: like React.Fragment\nexport const Fragment = (props: { children: Children })=><span>{props.children}</span>\n\nexport function Js(props: {children: (...args: any[]) => any }) {\n  const r = props.children()\n  console.log(r);\n  return r ? <Fragment>{r}</Fragment> : null\n}\n\n\n/** if as statement. children need to be in a function and the function accepts a parameter which value is given condition `c` but casted to NotFalsy<C> so there's no need of type guards in the body. Example:\n```\n<If c={type}>{type =>\n  <select multiple={true}>{names[type].map(c =>\n      <option value={c.id}>{c.label}</option>)}\n  </select>\n</If>\n```\n\nNo error thrown on second line because parameter type is not falsy but keep the original type (excluding falsy values)\n\nOther example:\n\n```\nexport class ErrorComponent extends React.Component<ErrorOptions> {\n  public render() {\n    return <div>\n      <If c={this.props.error}>{error =>\n        <React.Fragment>\n          <h2>Error</h2>\n          <If c={typeof error === 'string'}>{e =>\n            <h3>{e}</h3>}\n          </If>\n          <If c={typeof error === 'object'}>{e =>\n            <React.Fragment>\n              <h5>{error!.name}</h5>\n              <p>{error!.message}</p>\n              <If c={error.stack}>{e =>\n                <ul>\n                  {e.split('\\n').map(e =>\n                    <li>{e}</li>)}\n                </ul>}\n              </If>\n            </React.Fragment>}\n          </If>\n          <If c={this.props.responseText}>{responseText =>\n            <iframe css={{ border: 0, width: '100%', height: '400px' }} srcDoc={responseText}>\n            </iframe>}\n          </If>\n        </React.Fragment>}\n      </If>\n    </div>\n  }\n}\n\n```\n*/\nexport function If<T extends any = any\n>(props: { c: any, p?: T, children: (...args: NotFalsy<T>[]) => JSX.Element }) {\n//TODO: issue in dom implementation, children is an array \nconst f = Array.isArray(props.children) ? props.children[0] : props.children\n  const { c, p } = props\n  if (isNotFalsy(c))\n    return f.apply(null, [...(p ? [p] : []), c ])\n  else {\n    return null\n  }\n}\ntype NotFalsy<C=any> = Exclude<C, Falsy>\ntype Falsy = null | '' | undefined | false\nfunction isNotFalsy<T>(a: T): a is NotFalsy<T> { return !!a }\n\n","\nexport function checkThrow<T>(r?: T, msg = 'Throwing on undefined value'): T {\n  if (!r) { throw new Error(msg) }\n  return r\n}\n// export function tryTo<F extends (...args: any[]) => any>(f: F): ReturnType<F> | undefined {\n//   try {\n//     return f()\n//   } catch (error) {\n//   }\n// }\nexport function array<T = number>(n: number, sample?: T): T[] {\n  const a: (T | number)[] = [];\n  for (let i = 0; i < n; i++) {\n    a.push(typeof sample === 'undefined' ? i : sample);\n  }\n  return a as T[];\n}\nexport function repeat(n: number, s: string): string {\n  return array(n, s).join('')\n}\nexport function indent(i: number = 1, tabSize = 2): string {\n  return repeat(i * tabSize, ' ')\n}\n\nexport function getPosition(string: string, subString: string, index: number) {\n  return string.split(subString, index).join(subString).length;\n}\n\nexport function removeWhites(s: string, replaceWith=' '){\n  return s.replace(/\\s+/gm, replaceWith).trim()\n}\nexport function randomIntBetween(a: number, b: number){\n  return Math.floor(Math.random() * b) + a\n}\n\nexport function randomItem<T>(array: T[]): T{\n  return array[randomIntBetween(0, array.length)]\n}\n\n\nexport function printMs(ms: number, config: {\n  minutes?: boolean;\n  seconds?: boolean;\n  ms?: boolean;\n} = { minutes: false, seconds: true, ms: true }) {\n  config = { ...{ minutes: false, seconds: true, ms: true }, ...config };\n  const seconds = config.seconds && Math.floor(ms / 1000);\n  const minutes = config.minutes && seconds && Math.floor(seconds / 60);\n  const milliseconds = config.ms && Math.floor(ms % 1000 || ms);\n  return `${minutes ? `${minutes} minutes ` : ''}${seconds ? `${seconds} seconds ` : ''}${milliseconds ? `${milliseconds} ms ` : ''}`;\n}\n\n\nexport function printStyleHtmlAttribute(value: any): any {\n  return `${Object.keys(value)\n    .map(p => `${p}: ${value[p]}`)\n    .join('; ')}`;\n}\n\n\nlet _unique: number = 0\nexport function unique(prefix: string='_'): string {\n  return prefix+_unique++\n}","export * from './types'\n\nexport * from './elementImpl'\n\nexport * from './declarations/domElementDeclarations'\nexport * from './declarations/cssDeclarations'\nexport * from './elementClass'\nexport * from './createElement'\n\nexport {AbstractTextNodeLike, AbstractElementLike} from './elementImpl'\nexport * from './misc'\nexport * from './util'","import { RefObject, unique } from 'jsx-alone-core';\nimport { ElementClass } from '.';\n\nexport class RefObjectImpl<T extends Element & ElementClass> implements RefObject<T> {\n  _current: T | string | null = null\n  public get current(): T | null {\n    return typeof this._current === 'string' ? getMarkedElement(this._current) : this._current\n  }\n}\nexport function markElement(e: HTMLElement, label = '_jsxa_') {\n  let key = e.getAttribute(`data-${label}`)\n  if (!key) {\n    key = unique(label)\n    e.setAttribute(`data-${label}`, key)\n  }\n  return key\n}\nexport function getElementMark(e: HTMLElement, label = '_jsxa_') {\n  return e.getAttribute(`data-${label}`)\n}\n\nexport function getMarkedElement<T extends Element=Element>(key: string, parent = document, label = '_jsxa_') {\n  return parent.querySelector<T>(`[data-${label}=\"${key}\"]`)\n}","import { JSXAlone, ElementClass } from 'jsx-alone-dom';\n\n// example function element\nconst TaskPageLink = (props: {\n  children: string;\n  task: string;\n}) => <a href={`pages/tasks/${props.task}_small.html`}>{props.children}</a>;\n\n// example class element that renders given information and uses previous TaskPageLink element\nclass App extends ElementClass<{\n  name: string;\n  tasks: string[];\n}> {\n  render() {\n    return <article>\n      <h3>Welcome {this.props.name}!</h3>\n      <p>These are your tasks:</p>\n      <ul>{this.props.tasks.map(task => <li>\n        <TaskPageLink task={task}>{task}</TaskPageLink>\n      </li>)}\n      </ul>\n\n      <h2>\n            Tests with event handlers\n          </h2>\n      <p>Accessing HTMLElement using `this` dont' work because this has the correct context:<button onClick={e => alert(`${(this as any).tagName} text is ${(this as any).textContent}`)}>should work</button></p>\n          <p>Accessing event argument works::<button onClick={e => alert(`${e.currentTarget.tagName} text is ${e.currentTarget.textContent}`)}>should work</button></p>\n          <p>Accessing variables in scope works:<button onClick={e => alert(dummy('So '))}>don't work</button></p>\n          <p>Accessing members (this.) works: <button onClick={e => alert(this.dummy('So '))}>method</button></p>\n\n          <h2>\n            Tests with SVG\n          </h2>\n          <svg\n            viewBox=\"0 0 141 41\"\n            width=\"500px\" height=\"300px\">\n            <text fill=\"green\">hello world</text>\n            <path\n              d=\"M241.74,421.43v-41h28.61v41H241.74Zm24.47-4.13V384.56H245.86V417.3h20.35Z\"\n              transform=\"translate(-241.74 -380.43)\"\n              style={{ fill: '#ffcd05' }}\n            />\n          </svg>\n\n\n    </article>;\n  }\n  dummy(n: any) { return n + '_dummy' }\n}\nfunction dummy(n: any) { return n + '_dummy' }\n\n// render the App and append the generated element to body\nconst app = <App name=\"John Doe\" tasks={['Wash dishes', 'Go outside', 'Play soccer']} />;\nconst el = JSXAlone.render(app);\ndocument.body.appendChild(el)\n\n"]}