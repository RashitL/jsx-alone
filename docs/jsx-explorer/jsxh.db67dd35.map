{"version":3,"sources":["util/jsxh.js"],"names":["getLineNumberAndOffset","start","lines","offset","line","nodeToRange","node","getStart","getEnd","pos","end","getNodeType","parent","Object","keys","find","key","getParentRanges","ranges","lastEnd","forEachChild","child","push","addChildNodes","classifications","parentKind","ts","SyntaxKind","kind","id","type","map","startLine","endLine","self","addEventListener","event","data","code","title","version","createSourceFile","ScriptTarget","ES6","split","length","postMessage","e"],"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","file":"jsxh.db67dd35.map","sourceRoot":"../../jsx-explorer/src","sourcesContent":["// adapted from https://github.com/CompuIves/codesandbox-client/blob/196301c919dd032dccc08cbeb48cf8722eadd36b/packages/app/src/app/components/CodeEditor/Monaco/workers/syntax-highlighter.js\n\nimport {ts} from 'ts-simple-ast'\n\nfunction getLineNumberAndOffset(start, lines) {\n  let line = 0;\n  let offset = 0;\n  while (offset + lines[line] < start) {\n    offset += lines[line] + 1;\n    line += 1;\n  }\n  return { line: line + 1, offset };\n}\n\nfunction nodeToRange(node) {\n  if (\n    typeof node.getStart === 'function' &&\n    typeof node.getEnd === 'function'\n  ) {\n    return [node.getStart(), node.getEnd()];\n  } else if (\n    typeof node.pos !== 'undefined' &&\n    typeof node.end !== 'undefined'\n  ) {\n    return [node.pos, node.end];\n  }\n  return [0, 0];\n}\n\nfunction getNodeType(parent, node) {\n  return Object.keys(parent).find(key => parent[key] === node);\n}\n\nfunction getParentRanges(node) {\n  const ranges = [];\n  const [start, end] = nodeToRange(node);\n  let lastEnd = start;\n\n  ts.forEachChild(node, child => {\n    const [start, end] = nodeToRange(child);\n\n    ranges.push({\n      start: lastEnd,\n      end: start,\n    });\n    lastEnd = end;\n  });\n\n  if (lastEnd !== end) {\n    ranges.push({\n      start: lastEnd,\n      end,\n    });\n  }\n\n  return ranges;\n}\n\nfunction addChildNodes(node, lines, classifications) {\n  const parentKind = ts.SyntaxKind[node.kind];\n\n  ts.forEachChild(node, id => {\n    const type = getNodeType(node, id);\n\n    classifications.push(\n      ...getParentRanges(id).map(({ start, end }) => {\n        const { offset, line: startLine } = getLineNumberAndOffset(\n          start,\n          lines\n        );\n        const { line: endLine } = getLineNumberAndOffset(end, lines);\n\n        return {\n          start: start + 1 - offset,\n          end: end + 1 - offset,\n          kind: ts.SyntaxKind[id.kind],\n          parentKind,\n          type,\n          startLine,\n          endLine,\n        };\n      })\n    );\n\n    addChildNodes(id, lines, classifications);\n  });\n}\n\n// Respond to message from parent thread\nself.addEventListener('message', event => {\n  const { code, title, version } = event.data;\n  try {\n    const classifications = [];\n    const sourceFile = ts.createSourceFile(\n      title,\n      code,\n      ts.ScriptTarget.ES6,\n      true\n    );\n    const lines = code.split('\\n').map(line => line.length);\n\n    addChildNodes(sourceFile, lines, classifications);\n\n    self.postMessage({ classifications, version });\n  } catch (e) {\n    debugger\n    /* Ignore error */\n  }\n\n});"]}