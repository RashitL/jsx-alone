{"version":3,"sources":["monaco/extractCodeDecorations.ts","util/ts-simple-ast.ts","codeWorker.ts"],"names":[],"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","file":"codeWorker.004c7881.map","sourceRoot":"../../jsx-explorer/src","sourcesContent":["// adapted from https://github.com/CompuIves/codesandbox-client/blob/196301c919dd032dccc08cbeb48cf8722eadd36b/packages/app/src/app/components/CodeEditor/Monaco/workers/syntax-highlighter.js\n\nimport { ts } from 'ts-simple-ast'\n\nexport interface Classification {\n  start: number\n  end: number\n  kind: string\n  parentKind: string\n  type?: string\n  startLine: number\n  endLine: number\n}\nexport function extractCodeDecorations(code: string, title='main.tsx' ) {\n  const classifications: Classification[] = [];\n  const sourceFile = ts.createSourceFile(title, code, ts.ScriptTarget.ES2016, true);\n  const lines = code.split('\\n').map(line => line.length);\n  addChildNodes(sourceFile, lines, classifications);\n  return classifications;\n}\n\nfunction getLineNumberAndOffset(start: number, lines: number[]) {\n  let line = 0\n  let offset = 0\n  while (offset + lines[line] < start) {\n    offset += lines[line] + 1\n    line += 1\n  }\n  return { line: line + 1, offset }\n}\n\nfunction nodeToRange(node: ts.Node) {\n  if (\n    typeof node.getStart === 'function' &&\n    typeof node.getEnd === 'function'\n  ) {\n    return [node.getStart(), node.getEnd()]\n  } else if (\n    typeof node.pos !== 'undefined' &&\n    typeof node.end !== 'undefined'\n  ) {\n    return [node.pos, node.end]\n  }\n  return [0, 0]\n}\n\nfunction getNodeType(parent: any, node: ts.Node) {\n  return Object.keys(parent).find(key => parent[key] === node)\n}\n\nfunction getParentRanges(node: ts.Node) {\n  const ranges = []\n  const [start, end] = nodeToRange(node)\n  let lastEnd = start\n  ts.forEachChild(node, child => {\n    const [start, end] = nodeToRange(child)\n    ranges.push({\n      start: lastEnd,\n      end: start,\n    })\n    lastEnd = end\n  })\n  if (lastEnd !== end) {\n    ranges.push({\n      start: lastEnd,\n      end,\n    })\n  }\n  return ranges\n}\n\n\nfunction addChildNodes(node: ts.Node, lines: number[], classifications: Classification[]) {\n  const parentKind = ts.SyntaxKind[node.kind]\n  ts.forEachChild(node, id => {\n    const type = getNodeType(node, id)\n    classifications.push(\n      ...getParentRanges(id).map(({ start, end }) => {\n        const { offset, line: startLine } = getLineNumberAndOffset(\n          start,\n          lines\n        )\n        const { line: endLine } = getLineNumberAndOffset(end, lines)\n        return {\n          start: start + 1 - offset,\n          end: end + 1 - offset,\n          kind: ts.SyntaxKind[id.kind],\n          parentKind,\n          type,\n          startLine,\n          endLine,\n        }\n      })\n    )\n    addChildNodes(id, lines, classifications)\n  })\n}\n","import { Node, Project } from 'ts-simple-ast'\nimport {  getFile} from './files'\n\nlet project: Project | undefined\n\nexport function createProject(files: { fileName: string, content: string }[]): Project {\n  if (!project) {\n    project = new Project({\n      useVirtualFileSystem: true,\n      compilerOptions: {\n        strict: true,\n        jsx: 'react',\n        jsxFactory: 'JSXAlone.createElement'\n      } as any\n    })\n    project.createSourceFile('lib.es5.d.ts', getFile('lib.es5.d.ts'))\n    project.createSourceFile('lib.dom.d.ts', getFile('lib.dom.d.ts'))\n    project.createSourceFile('index.d.ts', getFile('jsx-alone-core.d.ts'))\n\n    files.forEach(f => project!.createSourceFile(f.fileName, f.content))\n  }\n  else {\n    files.forEach(f => {\n      if (project!.getSourceFile(f.fileName)!.getText() !== f.content) {\n        project!.getSourceFile(f.fileName)!.replaceWithText(f.content)\n      }\n    })\n  }\n  project.saveSync()\n  return project\n}\n\n/**\n * like Node.getChildren but using forEachChild(). TODO: perhaps is a good idea to add a useForEachChild to\n * ts-simple-ast getChildren that is optional but if provided do this ?\n */\nexport function getChildrenForEachChild(n: Node): Node[] {\n  const result: Node[] = []\n  n.forEachChild(n => result.push(n))\n  return result\n}\n","import { JsonImplOutputEl } from 'jsx-alone-core';\nimport Project, { Node as tsNode, ts } from 'ts-simple-ast';\nimport { CodeWorkerError, CodeWorkerRequest, CodeWorkerRequestJsxAst, CodeWorkerResponse, CodeWorkerResponseJsxAst, CodeWorkerResponseJsxAstDiagnostic, Node } from './codeWorkerManager';\nimport { extractCodeDecorations } from './monaco/extractCodeDecorations';\nimport { evaluate } from './util/evaluate';\nimport { createProject, getChildrenForEachChild } from './util/ts-simple-ast';\n\nself.addEventListener('message', ({ data }: { data: CodeWorkerRequest }) => {\n  const m: CodeWorkerResponse = {\n    version: data.version,\n    jsxSyntaxHighLight: {\n      classifications: extractCodeDecorations(data.code, data.title),\n    },\n    evaluate: doEvaluate(data),\n    jsxAst: doJSXAst(data)\n  }\n  //@ts-ignore\n  self.postMessage(m)\n})\n\nfunction doEvaluate(data: CodeWorkerRequest) {\n  let error: CodeWorkerError | undefined;\n  let result: JsonImplOutputEl | undefined;\n  try {\n    result = evaluate(data.code);\n    error = undefined;\n  }\n  catch (ex) {\n    error = {message: ex.message||ex+'', stack: ex.stack, evaluated: ex.evaluated, name: ex.name||ex+''}\n  }\n  return { error, result };\n}\n\nfunction buildJsxAstDiagnostics(project: Project): CodeWorkerResponseJsxAstDiagnostic[] {\n  return project.getPreEmitDiagnostics().map(tsd => {\n    const d: CodeWorkerResponseJsxAstDiagnostic = {\n      message: ts.flattenDiagnosticMessageText(tsd.compilerObject.messageText, '\\n'),\n      code: tsd.getCode(),\n      length: tsd.getLength(),\n      lineNumber: tsd.getLineNumber(),\n      start: tsd.getStart()\n    }\n    return d\n  })\n}\n\nfunction doJSXAst(data: CodeWorkerRequest): CodeWorkerResponseJsxAst {\n  const project = createProject([{\n    fileName: 't1.tsx',\n    content: data.code\n  }])\n  const config = data.jsxAst || {}\n  const f = project.getSourceFiles().find(s => s.getFilePath().endsWith('t1.tsx'))!\n  // const ast = buildJsxAstNode(f, config)\n  // const diagnostics = config.showDiagnostics ? buildJsxAstDiagnostics(project) : []\n\n  return {\n    ast: {type: 'asd', text: 'as', children: [], kind: 'asd'},\n    diagnostics: []\n  }\n}\n\nfunction buildJsxAstNode(n: tsNode, config: CodeWorkerRequestJsxAst): Node {\n  let text = n.getText().trim()\n  const children = config.mode === 'forEachChild' ? getChildrenForEachChild(n) : n.getChildren()\n\n  text = text.substring(0, Math.max(config.nodeTextLength || 20, text.length))\n  const node: Node = {\n    kind: n.getKindName(),\n    type: n.getType().getApparentType().getText(),\n    text,\n    children: children.map(c => buildJsxAstNode(c, config))\n  }\n  return node\n}"]}